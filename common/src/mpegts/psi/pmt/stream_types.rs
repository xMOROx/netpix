#[cfg(test)]
mod tests;

use serde::{Deserialize, Serialize};
use std::fmt::Display;

#[derive(Serialize, PartialEq, Eq, Deserialize, Debug, Clone, Ord, PartialOrd)]
pub enum StreamTypes {
    Reserved,
    Video111722,
    Video138182,
    Audio111723,
    Audio138183,
    PrivateSections,
    PESPackets,
    MHEG,
    DSMCC,
    H2221,
    TypeA,
    TypeB,
    TypeC,
    TypeD,
    Auxiliary,
    AudioADTS,
    Visual,
    AudioLATM,
    SLpacketizedstreamorFlexMuxstreamPESPacketized,
    SLpacketizedstreamorFlexMuxstreamSectionPacketized,
    Download,
    MetadataPES,
    MetadataSections,
    MetadataCarousel,
    MetadataObject,
    MetadataDownload,
    IPMP,
    VideoH264,
    RawAudio,
    Text,
    AuxiliaryVideo,
    VideoSVC,
    VideoMVC,
    ConformingVideoStream,
    Video3DH264,
    VideoHEVC,
    VideoHEVCTemporal,
    VideoMVCD,
    Timeline,
    VideoHEVCEnhanceG,
    VideoHEVCEnhanceGTemp,
    VideoHEVCEnhanceH,
    VideoHEVCEnhanceHTemp,
    GreenUnits,
    AudioMHASMain,
    AudioMHASAux,
    QualityUnits,
    Reserved138181,
    IPMPStream,
    UserPrivate,
}

impl From<u8> for StreamTypes {
    fn from(stream_type: u8) -> Self {
        match stream_type {
            0x00 => StreamTypes::Reserved,
            0x01 => StreamTypes::Video111722,
            0x02 => StreamTypes::Video138182,
            0x03 => StreamTypes::Audio111723,
            0x04 => StreamTypes::Audio138183,
            0x05 => StreamTypes::PrivateSections,
            0x06 => StreamTypes::PESPackets,
            0x07 => StreamTypes::MHEG,
            0x08 => StreamTypes::DSMCC,
            0x09 => StreamTypes::H2221,
            0x0A => StreamTypes::TypeA,
            0x0B => StreamTypes::TypeB,
            0x0C => StreamTypes::TypeC,
            0x0D => StreamTypes::TypeD,
            0x0E => StreamTypes::Auxiliary,
            0x0F => StreamTypes::AudioADTS,
            0x10 => StreamTypes::Visual,
            0x11 => StreamTypes::AudioLATM,
            0x12 => StreamTypes::SLpacketizedstreamorFlexMuxstreamPESPacketized,
            0x13 => StreamTypes::SLpacketizedstreamorFlexMuxstreamSectionPacketized,
            0x14 => StreamTypes::Download,
            0x15 => StreamTypes::MetadataPES,
            0x16 => StreamTypes::MetadataSections,
            0x17 => StreamTypes::MetadataCarousel,
            0x18 => StreamTypes::MetadataObject,
            0x19 => StreamTypes::MetadataDownload,
            0x1A => StreamTypes::IPMP,
            0x1B => StreamTypes::VideoH264,
            0x1C => StreamTypes::RawAudio,
            0x1D => StreamTypes::Text,
            0x1E => StreamTypes::AuxiliaryVideo,
            0x1F => StreamTypes::VideoSVC,
            0x20 => StreamTypes::VideoMVC,
            0x21 => StreamTypes::ConformingVideoStream,
            0x22 => StreamTypes::Video3DH264,
            0x23 => StreamTypes::VideoHEVC,
            0x24 => StreamTypes::VideoHEVCTemporal,
            0x25 => StreamTypes::VideoMVCD,
            0x26 => StreamTypes::Timeline,
            0x27 => StreamTypes::VideoHEVCEnhanceG,
            0x28 => StreamTypes::VideoHEVCEnhanceGTemp,
            0x29 => StreamTypes::VideoHEVCEnhanceH,
            0x2A => StreamTypes::VideoHEVCEnhanceHTemp,
            0x2B => StreamTypes::GreenUnits,
            0x2C => StreamTypes::AudioMHASMain,
            0x2D => StreamTypes::AudioMHASAux,
            0x2E => StreamTypes::QualityUnits,
            0x30..=0x7E => StreamTypes::Reserved138181,
            0x7F => StreamTypes::IPMPStream,
            _ => StreamTypes::UserPrivate,
        }
    }
}

impl Display for StreamTypes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str = match self {
            StreamTypes::Reserved => "Reserved",
            StreamTypes::Video111722 => "MPEG-1 Video",
            StreamTypes::Video138182 => "MPEG-2 Video",
            StreamTypes::Audio111723 => "MPEG-1 Audio",
            StreamTypes::Audio138183 => "MPEG-2 Audio",
            StreamTypes::PrivateSections => "Private Sections",
            StreamTypes::PESPackets => "PES Packets",
            StreamTypes::MHEG => "MHEG",
            StreamTypes::DSMCC => "DSM-CC",
            StreamTypes::H2221 => "H.222.1",
            StreamTypes::TypeA => "Type A",
            StreamTypes::TypeB => "Type B",
            StreamTypes::TypeC => "Type C",
            StreamTypes::TypeD => "Type D",
            StreamTypes::Auxiliary => "Auxiliary",
            StreamTypes::AudioADTS => "ADTS Audio",
            StreamTypes::Visual => "MPEG-4 Visual",
            StreamTypes::AudioLATM => "LATM Audio",
            StreamTypes::SLpacketizedstreamorFlexMuxstreamPESPacketized => "SL/FlexMux in PES",
            StreamTypes::SLpacketizedstreamorFlexMuxstreamSectionPacketized => {
                "SL/FlexMux in Sections"
            }
            StreamTypes::Download => "Synchronized Download Protocol",
            StreamTypes::MetadataPES => "Metadata PES",
            StreamTypes::MetadataSections => "Metadata Sections",
            StreamTypes::MetadataCarousel => "Metadata Carousel",
            StreamTypes::MetadataObject => "Metadata Object",
            StreamTypes::MetadataDownload => "Metadata Synchronized Download Protocol",
            StreamTypes::IPMP => "IPMP",
            StreamTypes::VideoH264 => "H.264 Video",
            StreamTypes::RawAudio => "Raw Audio",
            StreamTypes::Text => "Text",
            StreamTypes::AuxiliaryVideo => "Auxiliary Video",
            StreamTypes::VideoSVC => "SVC Video",
            StreamTypes::VideoMVC => "MVC Video",
            StreamTypes::ConformingVideoStream => "Conforming Video Stream",
            StreamTypes::Video3DH264 => "3D H.264 Video",
            StreamTypes::VideoHEVC => "HEVC Video",
            StreamTypes::VideoHEVCTemporal => "HEVC Temporal Video",
            StreamTypes::VideoMVCD => "MVCD  Video",
            StreamTypes::Timeline => "Timeline",
            StreamTypes::VideoHEVCEnhanceG => "HEVC Enhancement G  Video",
            StreamTypes::VideoHEVCEnhanceGTemp => "HEVC Temporal G  Video",
            StreamTypes::VideoHEVCEnhanceH => "HEVC Enhancement H  Video",
            StreamTypes::VideoHEVCEnhanceHTemp => "HEVC Temporal H  Video",
            StreamTypes::GreenUnits => "Green Units",
            StreamTypes::AudioMHASMain => "MHAS Main Audio",
            StreamTypes::AudioMHASAux => "MHAS Aux Audio",
            StreamTypes::QualityUnits => "Quality Units",
            StreamTypes::Reserved138181 => "Reserved",
            StreamTypes::IPMPStream => "IPMP Stream",
            StreamTypes::UserPrivate => "User Private",
        };
        write!(f, "{}", str)
    }
}
