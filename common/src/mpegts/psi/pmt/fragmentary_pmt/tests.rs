use super::*;
use pretty_assertions::assert_eq;

#[test]
fn test_unmarshall() {
    let data = vec![
        0x00, 0x02, 0xb0, 0x90, 0x00, 0x21, 0xd5, 0x00, 0x00, 0xe2, 0x5a, 0xf0, 0x0b, 0x0e, 0x03,
        0xc0, 0x00, 0x00, 0x0c, 0x04, 0x80, 0xb4, 0x81, 0x68, 0x1b, 0xe2, 0x5a, 0xf0, 0x16, 0x52,
        0x01, 0x02, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x02, 0x03, 0x1a, 0x44, 0x5f, 0x06, 0x01, 0x02,
        0x28, 0x04, 0x4d, 0x40, 0x28, 0x3f, 0x03, 0xe2, 0x5b, 0xf0, 0x11, 0x52, 0x01, 0x03, 0x0e,
        0x03, 0xc0, 0x00, 0x00, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x00, 0x03, 0x01, 0x67, 0x05, 0xe2,
        0x5f, 0xf0, 0x0d, 0x52, 0x01, 0x07, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x10,
        0xe0, 0x06, 0xe2, 0x5e, 0xf0, 0x12, 0x52, 0x01, 0x06, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x59,
        0x08, 0x70, 0x6f, 0x6c, 0x10, 0x00, 0x02, 0x00, 0x02, 0x06, 0xe2, 0x60, 0xf0, 0x19, 0x52,
        0x01, 0x08, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x0a, 0x04, 0x61, 0x75, 0x78, 0x03, 0x05, 0x04,
        0x45, 0x41, 0x43, 0x33, 0x7a, 0x03, 0xc0, 0x92, 0x10, 0x33, 0x59, 0xb6, 0x88, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
    ];
    let fragmentary_pmt = FragmentaryProgramMapTable::unmarshall(&data, true).unwrap();
    assert_eq!(fragmentary_pmt.header.table_id, 0x02);
    assert!(fragmentary_pmt.header.section_syntax_indicator);
    assert_eq!(fragmentary_pmt.header.section_length, 144);
    assert_eq!(fragmentary_pmt.header.version_number, 0x0a);
    assert!(fragmentary_pmt.header.current_next_indicator);
    assert_eq!(fragmentary_pmt.header.section_number, 0);
    assert_eq!(fragmentary_pmt.header.last_section_number, 0);
    assert_eq!(fragmentary_pmt.fields.program_number, 0x0021);
    assert_eq!(fragmentary_pmt.fields.pcr_pid, 0x025a);
    assert_eq!(fragmentary_pmt.fields.program_info_length, 11);
    assert_eq!(
        fragmentary_pmt.descriptors_payload,
        vec![0x0e, 0x03, 0xc0, 0x00, 0x00, 0x0c, 0x04, 0x80, 0xb4, 0x81, 0x68,]
    );
    assert_eq!(
        fragmentary_pmt.payload,
        vec![
            0x1b, 0xe2, 0x5a, 0xf0, 0x16, 0x52, 0x01, 0x02, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x02,
            0x03, 0x1a, 0x44, 0x5f, 0x06, 0x01, 0x02, 0x28, 0x04, 0x4d, 0x40, 0x28, 0x3f, 0x03,
            0xe2, 0x5b, 0xf0, 0x11, 0x52, 0x01, 0x03, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x0a, 0x04,
            0x70, 0x6f, 0x6c, 0x00, 0x03, 0x01, 0x67, 0x05, 0xe2, 0x5f, 0xf0, 0x0d, 0x52, 0x01,
            0x07, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x10, 0xe0, 0x06, 0xe2, 0x5e,
            0xf0, 0x12, 0x52, 0x01, 0x06, 0x0e, 0x03, 0xc0, 0x00, 0x00, 0x59, 0x08, 0x70, 0x6f,
            0x6c, 0x10, 0x00, 0x02, 0x00, 0x02, 0x06, 0xe2, 0x60, 0xf0, 0x19, 0x52, 0x01, 0x08,
            0x0e, 0x03, 0xc0, 0x00, 0x00, 0x0a, 0x04, 0x61, 0x75, 0x78, 0x03, 0x05, 0x04, 0x45,
            0x41, 0x43, 0x33, 0x7a, 0x03, 0xc0, 0x92, 0x10, 0x33, 0x59, 0xb6, 0x88,
        ]
    );
}
